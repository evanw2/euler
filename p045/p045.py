#!/usr/bin/env python

from math import sqrt
"""
Triangle, pentagonal, and hexagonal numbers are generated by the following 
formulae:

Triangle	 	Tn = n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn = n(3n-1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn = n(2n-1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
"""

def is_square(k):
    #check for some bit patterns for faster rejection. (sqrt is a bit slow
    #  for larger numbers.)
    last_3_bits = k & 7
    if not (last_3_bits == 0 or last_3_bits == 1 or last_3_bits == 4):
        return False
    d = round(sqrt(k))
    return d*d == k

#Triangle, pent, and hex fomulas converted to quadratic equations:
# n^2 + n - 2k = 0
# 3n^2 -n - 2k = 0
# 2n^2 - n - k = 0

def is_tri(k):
    if not is_square(1+8*k):
        return False
    return int(-1 + round(sqrt(1 + 8*k))) % 2 == 0
    

def is_pent(k):
    if not is_square(1+24*k):
        return False
    return int(1 + round(sqrt(1 + 24*k))) % 6 == 0
    
def is_hex(k):
    if not is_square(1+8*k):
        return False
    return int(1 + round(sqrt(1 + 8*k))) % 4 == 0


#Calculate where to start the search
start = 40756
while not is_hex(start):
    start += 1
start_index = int( (1 + sqrt(1 + 8*start))/4 )

def search():
    v = start
    i = start_index
    # Iterate over the hex numbers, and check if they are pentagonal
    # and triangular. H_(n+1) - H_n = 4n + 1
    while True:
        if is_pent(v) and is_tri(v):
            return v
        v += 4*i + 1
        i += 1

print search()

